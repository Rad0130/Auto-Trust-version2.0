{"ast":null,"code":"var _jsxFileName = \"/home/shafiur/Auto-Trust-Car-Shop-/frontend/src/components/Notifications/NotificationSystem.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport io from \"socket.io-client\";\nimport \"../../styles/Notifications.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\"); // Connect to your backend\n\nconst NotificationSystem = () => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [notifications, setNotifications] = useState([]);\n  const [isDropdownVisible, setIsDropdownVisible] = useState(false);\n  const [hasNewNotifications, setHasNewNotifications] = useState(false);\n  useEffect(() => {\n    if (user) {\n      // Load previous notifications from localStorage\n      const savedNotifications = localStorage.getItem(`notifications_${user._id}`);\n      if (savedNotifications) {\n        setNotifications(JSON.parse(savedNotifications));\n      }\n      socket.emit(\"joinUser\", user._id); // Join a user-specific room\n\n      socket.on(\"newCarPosted\", data => {\n        const newNotification = {\n          message: `New car posted: ${data.title} by ${data.userName}`,\n          id: Date.now(),\n          timestamp: new Date(),\n          read: false\n        };\n        setNotifications(prevNotifications => {\n          const updatedNotifications = [newNotification, ...prevNotifications];\n          // Save to localStorage\n          localStorage.setItem(`notifications_${user._id}`, JSON.stringify(updatedNotifications));\n          return updatedNotifications;\n        });\n        setHasNewNotifications(true);\n      });\n    }\n    return () => {\n      socket.off(\"newCarPosted\");\n    };\n  }, [user]);\n  const toggleDropdown = () => {\n    setIsDropdownVisible(!isDropdownVisible);\n    if (hasNewNotifications) {\n      setHasNewNotifications(false);\n      // Mark all notifications as read\n      setNotifications(prev => {\n        const updated = prev.map(notif => ({\n          ...notif,\n          read: true\n        }));\n        localStorage.setItem(`notifications_${user._id}`, JSON.stringify(updated));\n        return updated;\n      });\n    }\n  };\n  const clearNotifications = () => {\n    setNotifications([]);\n    localStorage.removeItem(`notifications_${user._id}`);\n  };\n  if (!user) return null; // Don't show notifications for unauthenticated users\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-icon\",\n      onClick: toggleDropdown,\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fa-regular fa-bell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"notification-badge\",\n        children: unreadCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), isDropdownVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification-dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), notifications.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-btn\",\n          onClick: clearNotifications,\n          children: \"Clear All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-list\",\n        children: notifications.length > 0 ? notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `notification-item ${notification.read ? 'read' : 'unread'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: notification.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: new Date(notification.timestamp).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 19\n          }, this)]\n        }, notification.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"no-notifications\",\n          children: \"No notifications yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationSystem, \"wmgItnVGti/GCrnHdEinAHuGLEY=\");\n_c = NotificationSystem;\nexport default NotificationSystem;\nvar _c;\n$RefreshReg$(_c, \"NotificationSystem\");","map":{"version":3,"names":["React","useState","useEffect","useContext","AuthContext","io","jsxDEV","_jsxDEV","socket","NotificationSystem","_s","user","notifications","setNotifications","isDropdownVisible","setIsDropdownVisible","hasNewNotifications","setHasNewNotifications","savedNotifications","localStorage","getItem","_id","JSON","parse","emit","on","data","newNotification","message","title","userName","id","Date","now","timestamp","read","prevNotifications","updatedNotifications","setItem","stringify","off","toggleDropdown","prev","updated","map","notif","clearNotifications","removeItem","unreadCount","filter","n","length","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","notification","toLocaleTimeString","_c","$RefreshReg$"],"sources":["/home/shafiur/Auto-Trust-Car-Shop-/frontend/src/components/Notifications/NotificationSystem.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { AuthContext } from \"../../context/AuthContext\";\nimport io from \"socket.io-client\";\nimport \"../../styles/Notifications.css\";\n\nconst socket = io(\"http://localhost:5000\"); // Connect to your backend\n\nconst NotificationSystem = () => {\n  const { user } = useContext(AuthContext);\n  const [notifications, setNotifications] = useState([]);\n  const [isDropdownVisible, setIsDropdownVisible] = useState(false);\n  const [hasNewNotifications, setHasNewNotifications] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      // Load previous notifications from localStorage\n      const savedNotifications = localStorage.getItem(`notifications_${user._id}`);\n      if (savedNotifications) {\n        setNotifications(JSON.parse(savedNotifications));\n      }\n\n      socket.emit(\"joinUser\", user._id); // Join a user-specific room\n\n      socket.on(\"newCarPosted\", (data) => {\n        const newNotification = {\n          message: `New car posted: ${data.title} by ${data.userName}`,\n          id: Date.now(),\n          timestamp: new Date(),\n          read: false\n        };\n        \n        setNotifications(prevNotifications => {\n          const updatedNotifications = [newNotification, ...prevNotifications];\n          // Save to localStorage\n          localStorage.setItem(`notifications_${user._id}`, JSON.stringify(updatedNotifications));\n          return updatedNotifications;\n        });\n        \n        setHasNewNotifications(true);\n      });\n    }\n\n    return () => {\n      socket.off(\"newCarPosted\");\n    };\n  }, [user]);\n\n  const toggleDropdown = () => {\n    setIsDropdownVisible(!isDropdownVisible);\n    if (hasNewNotifications) {\n      setHasNewNotifications(false);\n      // Mark all notifications as read\n      setNotifications(prev => {\n        const updated = prev.map(notif => ({ ...notif, read: true }));\n        localStorage.setItem(`notifications_${user._id}`, JSON.stringify(updated));\n        return updated;\n      });\n    }\n  };\n\n  const clearNotifications = () => {\n    setNotifications([]);\n    localStorage.removeItem(`notifications_${user._id}`);\n  };\n\n  if (!user) return null; // Don't show notifications for unauthenticated users\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  return (\n    <div className=\"notification-container\">\n      <div className=\"notification-icon\" onClick={toggleDropdown}>\n        <i className=\"fa-regular fa-bell\"></i>\n        {unreadCount > 0 && <span className=\"notification-badge\">{unreadCount}</span>}\n      </div>\n      \n      {isDropdownVisible && (\n        <div className=\"notification-dropdown\">\n          <div className=\"notification-header\">\n            <h3>Notifications</h3>\n            {notifications.length > 0 && (\n              <button className=\"clear-btn\" onClick={clearNotifications}>\n                Clear All\n              </button>\n            )}\n          </div>\n          \n          <div className=\"notification-list\">\n            {notifications.length > 0 ? (\n              notifications.map((notification) => (\n                <div \n                  key={notification.id} \n                  className={`notification-item ${notification.read ? 'read' : 'unread'}`}\n                >\n                  <p>{notification.message}</p>\n                  <small>\n                    {new Date(notification.timestamp).toLocaleTimeString()}\n                  </small>\n                </div>\n              ))\n            ) : (\n              <p className=\"no-notifications\">No notifications yet</p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NotificationSystem;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,2BAA2B;AACvD,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAO,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,MAAM,GAAGH,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,MAAMI,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM;IAAEC;EAAK,CAAC,GAAGR,UAAU,CAACC,WAAW,CAAC;EACxC,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACe,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAErEC,SAAS,CAAC,MAAM;IACd,IAAIS,IAAI,EAAE;MACR;MACA,MAAMO,kBAAkB,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiBT,IAAI,CAACU,GAAG,EAAE,CAAC;MAC5E,IAAIH,kBAAkB,EAAE;QACtBL,gBAAgB,CAACS,IAAI,CAACC,KAAK,CAACL,kBAAkB,CAAC,CAAC;MAClD;MAEAV,MAAM,CAACgB,IAAI,CAAC,UAAU,EAAEb,IAAI,CAACU,GAAG,CAAC,CAAC,CAAC;;MAEnCb,MAAM,CAACiB,EAAE,CAAC,cAAc,EAAGC,IAAI,IAAK;QAClC,MAAMC,eAAe,GAAG;UACtBC,OAAO,EAAE,mBAAmBF,IAAI,CAACG,KAAK,OAAOH,IAAI,CAACI,QAAQ,EAAE;UAC5DC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;UACdC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC;UACrBG,IAAI,EAAE;QACR,CAAC;QAEDtB,gBAAgB,CAACuB,iBAAiB,IAAI;UACpC,MAAMC,oBAAoB,GAAG,CAACV,eAAe,EAAE,GAAGS,iBAAiB,CAAC;UACpE;UACAjB,YAAY,CAACmB,OAAO,CAAC,iBAAiB3B,IAAI,CAACU,GAAG,EAAE,EAAEC,IAAI,CAACiB,SAAS,CAACF,oBAAoB,CAAC,CAAC;UACvF,OAAOA,oBAAoB;QAC7B,CAAC,CAAC;QAEFpB,sBAAsB,CAAC,IAAI,CAAC;MAC9B,CAAC,CAAC;IACJ;IAEA,OAAO,MAAM;MACXT,MAAM,CAACgC,GAAG,CAAC,cAAc,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,CAAC7B,IAAI,CAAC,CAAC;EAEV,MAAM8B,cAAc,GAAGA,CAAA,KAAM;IAC3B1B,oBAAoB,CAAC,CAACD,iBAAiB,CAAC;IACxC,IAAIE,mBAAmB,EAAE;MACvBC,sBAAsB,CAAC,KAAK,CAAC;MAC7B;MACAJ,gBAAgB,CAAC6B,IAAI,IAAI;QACvB,MAAMC,OAAO,GAAGD,IAAI,CAACE,GAAG,CAACC,KAAK,KAAK;UAAE,GAAGA,KAAK;UAAEV,IAAI,EAAE;QAAK,CAAC,CAAC,CAAC;QAC7DhB,YAAY,CAACmB,OAAO,CAAC,iBAAiB3B,IAAI,CAACU,GAAG,EAAE,EAAEC,IAAI,CAACiB,SAAS,CAACI,OAAO,CAAC,CAAC;QAC1E,OAAOA,OAAO;MAChB,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMG,kBAAkB,GAAGA,CAAA,KAAM;IAC/BjC,gBAAgB,CAAC,EAAE,CAAC;IACpBM,YAAY,CAAC4B,UAAU,CAAC,iBAAiBpC,IAAI,CAACU,GAAG,EAAE,CAAC;EACtD,CAAC;EAED,IAAI,CAACV,IAAI,EAAE,OAAO,IAAI,CAAC,CAAC;;EAExB,MAAMqC,WAAW,GAAGpC,aAAa,CAACqC,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACf,IAAI,CAAC,CAACgB,MAAM;EAE7D,oBACE5C,OAAA;IAAK6C,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACrC9C,OAAA;MAAK6C,SAAS,EAAC,mBAAmB;MAACE,OAAO,EAAEb,cAAe;MAAAY,QAAA,gBACzD9C,OAAA;QAAG6C,SAAS,EAAC;MAAoB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACrCV,WAAW,GAAG,CAAC,iBAAIzC,OAAA;QAAM6C,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAEL;MAAW;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1E,CAAC,EAEL5C,iBAAiB,iBAChBP,OAAA;MAAK6C,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBACpC9C,OAAA;QAAK6C,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBAClC9C,OAAA;UAAA8C,QAAA,EAAI;QAAa;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACrB9C,aAAa,CAACuC,MAAM,GAAG,CAAC,iBACvB5C,OAAA;UAAQ6C,SAAS,EAAC,WAAW;UAACE,OAAO,EAAER,kBAAmB;UAAAO,QAAA,EAAC;QAE3D;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAENnD,OAAA;QAAK6C,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAC/BzC,aAAa,CAACuC,MAAM,GAAG,CAAC,GACvBvC,aAAa,CAACgC,GAAG,CAAEe,YAAY,iBAC7BpD,OAAA;UAEE6C,SAAS,EAAE,qBAAqBO,YAAY,CAACxB,IAAI,GAAG,MAAM,GAAG,QAAQ,EAAG;UAAAkB,QAAA,gBAExE9C,OAAA;YAAA8C,QAAA,EAAIM,YAAY,CAAC/B;UAAO;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC7BnD,OAAA;YAAA8C,QAAA,EACG,IAAIrB,IAAI,CAAC2B,YAAY,CAACzB,SAAS,CAAC,CAAC0B,kBAAkB,CAAC;UAAC;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjD,CAAC;QAAA,GANHC,YAAY,CAAC5B,EAAE;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOjB,CACN,CAAC,gBAEFnD,OAAA;UAAG6C,SAAS,EAAC,kBAAkB;UAAAC,QAAA,EAAC;QAAoB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MACxD;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChD,EAAA,CArGID,kBAAkB;AAAAoD,EAAA,GAAlBpD,kBAAkB;AAuGxB,eAAeA,kBAAkB;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}